import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface TrackListItem {
  langCode: string;
  langName: string;
  name?: string; // track title (needed for manual tracks)
  kind?: string; // 'asr' for auto
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { url, lang = 'en' } = await req.json();
    console.log('Fetching captions for URL:', url, 'Preferred language:', lang);

    const videoId = extractVideoId(url);
    if (!videoId) throw new Error('Invalid YouTube URL');

    console.log('Video ID:', videoId);

    // Step 1: fetch track list (reliable way to know available captions)
    const tracks = await getTrackList(videoId);
    console.log(`Found ${tracks.length} tracks in list endpoint`);

    let selected = selectBestTrack(tracks, lang);

    // Step 2: if list is empty or no suitable track found, try legacy fallbacks
    if (!selected) {
      console.log('No suitable track from list, trying direct fallbacks');
      const fallbackXml = await tryLegacyEndpoints(videoId, lang);
      if (!fallbackXml) throw new Error('No captions available for this video');

      const parsed = parseXmlTranscript(fallbackXml);
      return json({
        ...parsed,
        languageCode: lang,
        languageName: getLanguageName(lang),
        isAutoGenerated: false,
        availableLanguages: tracks.map(t => ({ code: t.langCode, name: t.langName, isAuto: t.kind === 'asr' }))
      });
    }

    // Step 3: fetch captions with correct params (name/kind may be required)
    const captionUrl = buildCaptionUrl(videoId, selected);
    console.log('Fetching from selected track URL:', captionUrl);
    const xml = await fetchXml(captionUrl);

    if (!xml.includes('<text')) {
      // Try toggling fmt to srv3 (sometimes needed)
      const withFmt = captionUrl + '&fmt=srv3';
      console.log('Retry with fmt=srv3:', withFmt);
      const xml2 = await fetchXml(withFmt);
      if (!xml2.includes('<text')) throw new Error('No captions available for this video');

      const parsed2 = parseXmlTranscript(xml2);
      return json({
        ...parsed2,
        languageCode: selected.langCode,
        languageName: selected.langName,
        isAutoGenerated: selected.kind === 'asr',
        availableLanguages: tracks.map(t => ({ code: t.langCode, name: t.langName, isAuto: t.kind === 'asr' }))
      });
    }

    const parsed = parseXmlTranscript(xml);
    return json({
      ...parsed,
      languageCode: selected.langCode,
      languageName: selected.langName,
      isAutoGenerated: selected.kind === 'asr',
      availableLanguages: tracks.map(t => ({ code: t.langCode, name: t.langName, isAuto: t.kind === 'asr' }))
    });

  } catch (error) {
    console.error('Error:', error);
    return new Response(JSON.stringify({ error: error instanceof Error ? error.message : 'Failed to fetch captions' }), {
      status: 400,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});

function json(data: unknown) {
  return new Response(JSON.stringify(data), { headers: { ...corsHeaders, 'Content-Type': 'application/json' } });
}

async function getTrackList(videoId: string): Promise<TrackListItem[]> {
  try {
    const listUrl = `https://www.youtube.com/api/timedtext?type=list&v=${videoId}`;
    console.log('Track list URL:', listUrl);
    const xml = await fetchXml(listUrl);

    // Parse <track ... /> tags and their attributes
    const tracks: TrackListItem[] = [];
    const trackTagRegex = /<track\s+([^>]+?)\s*\/?>/g;
    const attrRegex = /(\w+)="([^"]*)"/g;

    let m;
    while ((m = trackTagRegex.exec(xml)) !== null) {
      const attrs = m[1];
      const item: Record<string, string> = {};
      let a;
      while ((a = attrRegex.exec(attrs)) !== null) {
        item[a[1]] = a[2];
      }
      const langCode = item["lang_code"] || item["lang_code_localized"] || item["lc"];
      const langName = item["lang_translated"] || item["lang_original"] || getLanguageName(langCode || '');
      if (!langCode) continue;

      tracks.push({
        langCode,
        langName,
        name: item["name"],
        kind: item["kind"],
      });
    }

    return tracks;
  } catch (e) {
    console.log('Failed to get track list:', e);
    return [];
  }
}

function selectBestTrack(tracks: TrackListItem[], preferred: string): TrackListItem | null {
  if (tracks.length === 0) return null;
  // Exact language match (manual preferred)
  let t = tracks.find(t => t.langCode === preferred && t.kind !== 'asr');
  if (t) return t;
  // Exact language auto-generated
  t = tracks.find(t => t.langCode === preferred && t.kind === 'asr');
  if (t) return t;
  // English fallback
  if (preferred !== 'en') {
    t = tracks.find(t => t.langCode === 'en' && t.kind !== 'asr') || tracks.find(t => t.langCode === 'en' && t.kind === 'asr');
    if (t) return t;
  }
  // Any manual
  t = tracks.find(t => t.kind !== 'asr');
  if (t) return t;
  // Any
  return tracks[0] || null;
}

function buildCaptionUrl(videoId: string, t: TrackListItem): string {
  const params = new URLSearchParams();
  params.set('v', videoId);
  params.set('lang', t.langCode);
  if (t.kind === 'asr') params.set('kind', 'asr');
  if (t.name) params.set('name', t.name);
  return `https://www.youtube.com/api/timedtext?${params.toString()}`;
}

async function tryLegacyEndpoints(videoId: string, lang: string): Promise<string | null> {
  // Try specific language manual
  let url = `https://www.youtube.com/api/timedtext?v=${videoId}&lang=${lang}`;
  let xml = await fetchXml(url);
  console.log('Legacy manual length:', xml.length, 'has <text>:', xml.includes('<text'));
  if (xml.includes('<text')) return xml;

  // Try specific language ASR
  url = `https://www.youtube.com/api/timedtext?v=${videoId}&lang=${lang}&kind=asr`;
  xml = await fetchXml(url);
  console.log('Legacy ASR length:', xml.length, 'has <text>:', xml.includes('<text'));
  if (xml.includes('<text')) return xml;

  // English manual
  url = `https://www.youtube.com/api/timedtext?v=${videoId}&lang=en`;
  xml = await fetchXml(url);
  console.log('Legacy EN manual length:', xml.length, 'has <text>:', xml.includes('<text'));
  if (xml.includes('<text')) return xml;

  // English ASR
  url = `https://www.youtube.com/api/timedtext?v=${videoId}&lang=en&kind=asr`;
  xml = await fetchXml(url);
  console.log('Legacy EN ASR length:', xml.length, 'has <text>:', xml.includes('<text'));
  if (xml.includes('<text')) return xml;

  return null;
}

async function fetchXml(url: string): Promise<string> {
  try {
    const resp = await fetch(url);
    if (!resp.ok) return '';
    return await resp.text();
  } catch {
    return '';
  }
}

function getLanguageName(code: string): string {
  const names: Record<string, string> = {
    'en': 'English',
    'en-US': 'English (US)',
    'en-GB': 'English (UK)',
    'es': 'Spanish',
    'fr': 'French',
    'de': 'German',
    'it': 'Italian',
    'pt': 'Portuguese',
    'ru': 'Russian',
    'ja': 'Japanese',
    'ko': 'Korean',
    'zh': 'Chinese',
    'zh-CN': 'Chinese (Simplified)',
    'zh-TW': 'Chinese (Traditional)',
    'ar': 'Arabic',
    'hi': 'Hindi'
  };
  return names[code] || (code ? code.toUpperCase() : 'Unknown');
}

function extractVideoId(url: string): string | null {
  const patterns = [
    /(?:youtube\.com\/watch\?v=|youtu\.be\/|youtube\.com\/embed\/)([^&\n?#]+)/,
    /^([a-zA-Z0-9_-]{11})$/
  ];
  for (const pattern of patterns) {
    const match = url.match(pattern);
    if (match) return match[1];
  }
  return null;
}

function parseXmlTranscript(xml: string): { text: string; timeline: Array<{ time: string; text: string }> } {
  const textMatches = [...xml.matchAll(/<text[^>]*start="([^"]*)"[^>]*>([\s\S]*?)<\/text>/g)];

  const timeline = textMatches.map(match => {
    const startSeconds = parseFloat(match[1]);
    const minutes = Math.floor(startSeconds / 60);
    const seconds = Math.floor(startSeconds % 60);
    const timeStr = `${minutes}:${seconds.toString().padStart(2, '0')}`;

    const raw = match[2]
      .replace(/&amp;/g, '&')
      .replace(/&lt;/g, '<')
      .replace(/&gt;/g, '>')
      .replace(/&quot;/g, '"')
      .replace(/&#39;/g, "'")
      .replace(/\n/g, ' ')
      .trim();

    return { time: timeStr, text: raw };
  });

  const fullText = timeline.map(item => item.text).join(' ');
  return { text: fullText, timeline };
}
