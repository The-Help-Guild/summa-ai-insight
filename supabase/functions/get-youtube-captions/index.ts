import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface CaptionTrack {
  languageCode: string;
  languageName: string;
  isAutoGenerated: boolean;
  url: string;
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { url, lang = 'en' } = await req.json();
    console.log('Fetching captions for URL:', url, 'Language:', lang);

    const videoId = extractVideoId(url);
    if (!videoId) {
      throw new Error('Invalid YouTube URL');
    }

    console.log('Video ID:', videoId);

    // Fetch available caption tracks
    const tracks = await getAvailableTracks(videoId);
    console.log('Available tracks:', tracks.length);

    if (tracks.length === 0) {
      throw new Error('No captions available for this video');
    }

    // Try to find exact language match first
    let selectedTrack = tracks.find(t => t.languageCode === lang && !t.isAutoGenerated);
    
    // If not found, try auto-generated for that language
    if (!selectedTrack) {
      selectedTrack = tracks.find(t => t.languageCode === lang && t.isAutoGenerated);
    }
    
    // If still not found, try English
    if (!selectedTrack && lang !== 'en') {
      selectedTrack = tracks.find(t => t.languageCode === 'en');
    }
    
    // If still nothing, use first available
    if (!selectedTrack) {
      selectedTrack = tracks[0];
    }

    console.log('Selected track:', selectedTrack.languageCode, selectedTrack.isAutoGenerated);

    // Fetch captions from selected track
    const response = await fetch(selectedTrack.url);
    
    if (!response.ok) {
      throw new Error('Failed to fetch captions from track');
    }

    const xml = await response.text();
    const parsed = parseXmlTranscript(xml);

    console.log('Successfully extracted transcript');
    return new Response(
      JSON.stringify({
        ...parsed,
        languageCode: selectedTrack.languageCode,
        languageName: selectedTrack.languageName,
        isAutoGenerated: selectedTrack.isAutoGenerated,
        availableLanguages: tracks.map(t => ({
          code: t.languageCode,
          name: t.languageName,
          isAuto: t.isAutoGenerated
        }))
      }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );

  } catch (error) {
    console.error('Error:', error);
    return new Response(
      JSON.stringify({ error: error instanceof Error ? error.message : 'Failed to fetch captions' }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 400 }
    );
  }
});

async function getAvailableTracks(videoId: string): Promise<CaptionTrack[]> {
  const tracks: CaptionTrack[] = [];
  
  // Common languages to check
  const languages = ['en', 'es', 'fr', 'de', 'it', 'pt', 'ru', 'ja', 'ko', 'zh', 'ar', 'hi'];
  
  for (const lang of languages) {
    // Try regular captions
    const regularUrl = `https://www.youtube.com/api/timedtext?v=${videoId}&lang=${lang}`;
    const regularResponse = await fetch(regularUrl);
    
    if (regularResponse.ok) {
      const text = await regularResponse.text();
      if (text && text.includes('<text')) {
        tracks.push({
          languageCode: lang,
          languageName: getLanguageName(lang),
          isAutoGenerated: false,
          url: regularUrl
        });
        continue;
      }
    }
    
    // Try auto-generated captions
    const asrUrl = `https://www.youtube.com/api/timedtext?v=${videoId}&lang=${lang}&kind=asr`;
    const asrResponse = await fetch(asrUrl);
    
    if (asrResponse.ok) {
      const text = await asrResponse.text();
      if (text && text.includes('<text')) {
        tracks.push({
          languageCode: lang,
          languageName: getLanguageName(lang),
          isAutoGenerated: true,
          url: asrUrl
        });
      }
    }
  }
  
  return tracks;
}

function getLanguageName(code: string): string {
  const names: Record<string, string> = {
    'en': 'English',
    'es': 'Spanish',
    'fr': 'French',
    'de': 'German',
    'it': 'Italian',
    'pt': 'Portuguese',
    'ru': 'Russian',
    'ja': 'Japanese',
    'ko': 'Korean',
    'zh': 'Chinese',
    'ar': 'Arabic',
    'hi': 'Hindi'
  };
  return names[code] || code.toUpperCase();
}

function extractVideoId(url: string): string | null {
  const patterns = [
    /(?:youtube\.com\/watch\?v=|youtu\.be\/|youtube\.com\/embed\/)([^&\n?#]+)/,
    /^([a-zA-Z0-9_-]{11})$/
  ];

  for (const pattern of patterns) {
    const match = url.match(pattern);
    if (match) return match[1];
  }
  
  return null;
}

function parseXmlTranscript(xml: string): { text: string; timeline: Array<{ time: string; text: string }> } {
  const textMatches = [...xml.matchAll(/<text[^>]*start="([^"]*)"[^>]*>([^<]*)<\/text>/g)];
  
  const timeline = textMatches.map(match => {
    const startSeconds = parseFloat(match[1]);
    const minutes = Math.floor(startSeconds / 60);
    const seconds = Math.floor(startSeconds % 60);
    const timeStr = `${minutes}:${seconds.toString().padStart(2, '0')}`;
    
    const text = match[2]
      .replace(/&amp;/g, '&')
      .replace(/&lt;/g, '<')
      .replace(/&gt;/g, '>')
      .replace(/&quot;/g, '"')
      .replace(/&#39;/g, "'")
      .trim();
    
    return { time: timeStr, text };
  });

  const fullText = timeline.map(item => item.text).join(' ');
  
  return { text: fullText, timeline };
}
